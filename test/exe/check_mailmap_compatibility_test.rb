# frozen_string_literal: true

# This file was generated by `rake test:generate` task using git version 2.39.3 (Apple Git-146).
#
# `CheckMailmapCompatibilityTest`` is a test suite to check compatibility
# between `git check-mailmap` and `check-mailmap` command.
# To not depend on the `git` command at runtime, this test suite is generated statically.

require 'open3'
require 'tempfile'
require 'test_helper'

class CheckMailmapCompatibilityTest < Minitest::Test # rubocop:disable Metrics/ClassLength
  parallelize_me!

  def setup
    @mailmap = Tempfile.new
  end

  def teardown
    @mailmap.close!
  end

  def test_check_mailmap_on_empty_with_email
    @mailmap.write("\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_empty_with_name_email
    @mailmap.write("\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_empty_with_wrong_email
    @mailmap.write("\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_empty_with_invalid_empty
    @mailmap.write("\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_empty_with_invalid_name
    @mailmap.write("\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_with_email
    @mailmap.write("Proper Name Commit Name\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_with_name_email
    @mailmap.write("Proper Name Commit Name\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_with_wrong_email
    @mailmap.write("Proper Name Commit Name\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_with_invalid_empty
    @mailmap.write("Proper Name Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_with_invalid_name
    @mailmap.write("Proper Name Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_with_email
    @mailmap.write("Proper Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_with_name_email
    @mailmap.write("Proper Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_with_wrong_email
    @mailmap.write("Proper Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_with_invalid_empty
    @mailmap.write("Proper Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_with_invalid_name
    @mailmap.write("Proper Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_email_with_email
    @mailmap.write("<proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["<proper@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_email_with_name_email
    @mailmap.write("<proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["Commit Name <proper@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_email_with_wrong_email
    @mailmap.write("<proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_email_with_invalid_empty
    @mailmap.write("<proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_email_with_invalid_name
    @mailmap.write("<proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_email_with_email
    @mailmap.write("Proper Name Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_email_with_name_email
    @mailmap.write("Proper Name Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_email_with_wrong_email
    @mailmap.write("Proper Name Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_email_with_invalid_empty
    @mailmap.write("Proper Name Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_name_email_with_invalid_name
    @mailmap.write("Proper Name Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_email_with_email
    @mailmap.write("Proper Name <proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name <proper@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_email_with_name_email
    @mailmap.write("Proper Name <proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name <proper@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_email_with_wrong_email
    @mailmap.write("Proper Name <proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_email_with_invalid_empty
    @mailmap.write("Proper Name <proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_email_with_invalid_name
    @mailmap.write("Proper Name <proper@email.xx> <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_name_email_with_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_name_email_with_name_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Proper Name <proper@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_name_email_with_wrong_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_name_email_with_invalid_empty
    @mailmap.write("Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_name_email_name_email_with_invalid_name
    @mailmap.write("Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_name_email_with_email
    @mailmap.write("<proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_name_email_with_name_email
    @mailmap.write("<proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["Commit Name <proper@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_name_email_with_wrong_email
    @mailmap.write("<proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_name_email_with_invalid_empty
    @mailmap.write("<proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_email_name_email_with_invalid_name
    @mailmap.write("<proper@email.xx> Commit Name <commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_comment_with_email
    @mailmap.write("# Comment\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_comment_with_name_email
    @mailmap.write("# Comment\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_comment_with_wrong_email
    @mailmap.write("# Comment\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_comment_with_invalid_empty
    @mailmap.write("# Comment\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_comment_with_invalid_name
    @mailmap.write("# Comment\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_trailing_comment_with_email
    @mailmap.write("Proper Name <commit@email.xx> # Comment\n")
    @mailmap.close

    expected = ["Proper Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_trailing_comment_with_name_email
    @mailmap.write("Proper Name <commit@email.xx> # Comment\n")
    @mailmap.close

    expected = ["Proper Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_trailing_comment_with_wrong_email
    @mailmap.write("Proper Name <commit@email.xx> # Comment\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_trailing_comment_with_invalid_empty
    @mailmap.write("Proper Name <commit@email.xx> # Comment\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_trailing_comment_with_invalid_name
    @mailmap.write("Proper Name <commit@email.xx> # Comment\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_with_email
    @mailmap.write("Commit Name\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_with_name_email
    @mailmap.write("Commit Name\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_with_wrong_email
    @mailmap.write("Commit Name\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_with_invalid_empty
    @mailmap.write("Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_with_invalid_name
    @mailmap.write("Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_email_name_with_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_email_name_with_name_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_email_name_with_wrong_email
    @mailmap.write("Proper Name <proper@email.xx> Commit Name\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_email_name_with_invalid_empty
    @mailmap.write("Proper Name <proper@email.xx> Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_name_email_name_with_invalid_name
    @mailmap.write("Proper Name <proper@email.xx> Commit Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_with_email
    @mailmap.write("<commit@email.xx>\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_with_name_email
    @mailmap.write("<commit@email.xx>\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_with_wrong_email
    @mailmap.write("<commit@email.xx>\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_with_invalid_empty
    @mailmap.write("<commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_with_invalid_name
    @mailmap.write("<commit@email.xx>\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_name_with_email
    @mailmap.write("<commit@email.xx> Proper Name\n")
    @mailmap.close

    expected = ["<commit@email.xx>\n", '', 0]
    actual = check_mailmap('<commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_name_with_name_email
    @mailmap.write("<commit@email.xx> Proper Name\n")
    @mailmap.close

    expected = ["Commit Name <commit@email.xx>\n", '', 0]
    actual = check_mailmap('Commit Name <commit@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_name_with_wrong_email
    @mailmap.write("<commit@email.xx> Proper Name\n")
    @mailmap.close

    expected = ["<wrong@email.xx>\n", '', 0]
    actual = check_mailmap('<wrong@email.xx>', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_name_with_invalid_empty
    @mailmap.write("<commit@email.xx> Proper Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: \n", 128]
    actual = check_mailmap('', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  def test_check_mailmap_on_invalid_email_name_with_invalid_name
    @mailmap.write("<commit@email.xx> Proper Name\n")
    @mailmap.close

    expected = ['', "fatal: unable to parse contact: Commit Name\n", 128]
    actual = check_mailmap('Commit Name', mailmap_path: @mailmap.path)

    assert_equal(expected, actual)
  end

  private

  def check_mailmap(*args, mailmap_path: nil)
    command = [
      RbConfig.ruby,
      '-r',
      File.expand_path('../../simplecov_spawn.rb', __FILE__),
      File.expand_path('../../../exe/check-mailmap', __FILE__)
    ]
    command += ['-f', mailmap_path] if mailmap_path
    command += args
    stdout, stderr, status = Open3.capture3(*command)
    [stdout, stderr, status.exitstatus]
  end
end
