# frozen_string_literal: true

# This file was generated by `rake test:generate` task using <%= `git --version`.chomp %>.
#
# `CheckMailmapCompatibilityTest` is a test suite to check compatibility
# between `git check-mailmap` and `check-mailmap` command.
# To not depend on the `git` command at runtime, this test suite is generated statically.

<%- require 'fileutils' -%>
<%- require 'open3' -%>
<%- require 'tempfile' -%>
require 'open3'
require 'tempfile'
require 'test_helper'

<%-
  $git_dir = Dir.mktmpdir
  at_exit { FileUtils.remove_dir($git_dir) }
  system('git', '-C', $git_dir, 'init', '--quiet', exception: true)

  def git_check_mailmap(*args, mailmap_value: '')
    mailmap_path = File.join($git_dir, '.mailmap')
    File.write(mailmap_path, mailmap_value)
    stdout, stderr, status = Open3.capture3('git', '-C', $git_dir, '-c', "mailmap.file=#{mailmap_path}", 'check-mailmap', *args)
    [stdout, stderr, status.exitstatus]
  end
-%>
class CheckMailmapCompatibilityTest < Minitest::Test # rubocop:disable Metrics/ClassLength
  parallelize_me!

  def setup
    @mailmap = Tempfile.new
  end

  def teardown
    @mailmap.close!
  end
  <%-
    mailmap_patterns = {
      empty: "\n",
      name_name: "Proper Name Commit Name\n",
      name_email: "Proper Name <commit@email.xx>\n",
      email_email: "<proper@email.xx> <commit@email.xx>\n",
      name_name_email: "Proper Name Commit Name <commit@email.xx>\n",
      name_email_email: "Proper Name <proper@email.xx> <commit@email.xx>\n",
      name_email_name_email: "Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n",
      email_name_email: "<proper@email.xx> Commit Name <commit@email.xx>\n",
      comment: "# Comment\n",
      trailing_comment: "Proper Name <commit@email.xx> # Comment\n",
      invalid_name: "Commit Name\n",
      invalid_name_email_name: "Proper Name <proper@email.xx> Commit Name\n",
      invalid_email: "<commit@email.xx>\n",
      invalid_email_name: "<commit@email.xx> Proper Name\n"
    }
    contact_patterns = {
      email: '<commit@email.xx>',
      name_email: 'Commit Name <commit@email.xx>',
      wrong_email: '<wrong@email.xx>',
      invalid_empty: '',
      invalid_name: 'Commit Name'
    }
  -%>
  <%- mailmap_patterns.each do |mailmap_key, mailmap_value| -%>
    <%- contact_patterns.each do |contact_key, contact_value| -%>

  <%- stdout, stderr, status = git_check_mailmap(contact_value, mailmap_value: mailmap_value) -%>
  def test_check_mailmap_on_<%= mailmap_key %>_with_<%= contact_key %>_should<%= '_not' unless stdout =~ /proper/i %>_be_found
    @mailmap.write(<%= mailmap_value.dump %>)

    expected = <%= [stdout, stderr, status] %>
    actual = check_mailmap(<%= contact_value.dump %>)

    assert_equal(expected, actual)
  end
    <%- end -%>
  <%- end -%>

  private

  def check_mailmap(*args)
    @mailmap.close
    command = [
      RbConfig.ruby,
      '-r',
      File.expand_path('../../simplecov_spawn.rb', __FILE__),
      File.expand_path('../../../exe/check-mailmap', __FILE__),
      '-f', @mailmap.path
    ] + args
    stdout, stderr, status = Open3.capture3(*command)
    [stdout, stderr, status.exitstatus]
  end
end
