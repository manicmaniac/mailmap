# TypeProf 0.21.2

# Classes
module Mailmap
  class ParserError < StandardError
  end

  class Map
    include Enumerable[[String?, String?, String?, String]]

    attr_reader filename: String?
    @map: Hash[String, Hash[String?, [String?, String?]]]

    def self.load: (String path) -> Map
    alias self.parse self.new

    def initialize: (String string, ?String? filename) -> void
    def each: ?{ (String?, String?, String?, String) -> void } -> (Enumerator[[String?, String?, String?, String], void] | Map)
    def lookup: (String? commit_name_or_nil, String commit_email) -> [String?, String?]?
    def resolve: (String commit_name_or_nil, String commit_email) -> [String, String]
               | (nil commit_name_or_nil, String commit_email) -> [String?, String]
               | (String? commit_name_or_nil, String commit_email) -> [String?, String]
    def include_name?: (String name) -> bool
    def include_email?: (String email) -> bool

    private
    def parse: (String string) -> void
    def tokenize_name_and_email: (String line) -> Array[[Symbol, String]]
    PATTERNS: Hash[Array[Symbol], Array[Symbol]]
    def parse_name_and_email: (Array[[Symbol, String]] tokens, Integer line_number) -> [String?, String?, String?, String]
    def unquote_email: (String email) -> String
    def location: (Integer line_number) -> String
  end
end
